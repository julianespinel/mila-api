// Code generated by MockGen. DO NOT EDIT.
// Source: core/persistence.go

// Package core is a generated GoMock package.
package core

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/julianespinel/mila-api/models"
	reflect "reflect"
)

// MockMilaPersistence is a mock of MilaPersistence interface
type MockMilaPersistence struct {
	ctrl     *gomock.Controller
	recorder *MockMilaPersistenceMockRecorder
}

// MockMilaPersistenceMockRecorder is the mock recorder for MockMilaPersistence
type MockMilaPersistenceMockRecorder struct {
	mock *MockMilaPersistence
}

// NewMockMilaPersistence creates a new mock instance
func NewMockMilaPersistence(ctrl *gomock.Controller) *MockMilaPersistence {
	mock := &MockMilaPersistence{ctrl: ctrl}
	mock.recorder = &MockMilaPersistenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMilaPersistence) EXPECT() *MockMilaPersistenceMockRecorder {
	return m.recorder
}

// countStocks mocks base method
func (m *MockMilaPersistence) countStocks() int {
	ret := m.ctrl.Call(m, "countStocks")
	ret0, _ := ret[0].(int)
	return ret0
}

// countStocks indicates an expected call of countStocks
func (mr *MockMilaPersistenceMockRecorder) countStocks() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "countStocks", reflect.TypeOf((*MockMilaPersistence)(nil).countStocks))
}

// saveStocks mocks base method
func (m *MockMilaPersistence) saveStocks(stocks []models.Stock) error {
	ret := m.ctrl.Call(m, "saveStocks", stocks)
	ret0, _ := ret[0].(error)
	return ret0
}

// saveStocks indicates an expected call of saveStocks
func (mr *MockMilaPersistenceMockRecorder) saveStocks(stocks interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "saveStocks", reflect.TypeOf((*MockMilaPersistence)(nil).saveStocks), stocks)
}

// getCurrentDayStocks mocks base method
func (m *MockMilaPersistence) getCurrentDayStocks(country string) []models.Stock {
	ret := m.ctrl.Call(m, "getCurrentDayStocks", country)
	ret0, _ := ret[0].([]models.Stock)
	return ret0
}

// getCurrentDayStocks indicates an expected call of getCurrentDayStocks
func (mr *MockMilaPersistenceMockRecorder) getCurrentDayStocks(country interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getCurrentDayStocks", reflect.TypeOf((*MockMilaPersistence)(nil).getCurrentDayStocks), country)
}

// removeOldStocksData mocks base method
func (m *MockMilaPersistence) removeOldStocksData() {
	m.ctrl.Call(m, "removeOldStocksData")
}

// removeOldStocksData indicates an expected call of removeOldStocksData
func (mr *MockMilaPersistenceMockRecorder) removeOldStocksData() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "removeOldStocksData", reflect.TypeOf((*MockMilaPersistence)(nil).removeOldStocksData))
}
